import random

# tuples for suits and ranks, because they don't change
suits = ('Hearts', 'Diamonds', 'Spades', 'Clubs')
ranks = ('Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Jack', 'Queen', 'King', 'Ace')

# dictionnary for values to pair ranks to values
values = {'Two':2, 'Three':3, 'Four':4, 'Five':5, 'Six':6, 'Seven':7, 'Eight':8, 'Nine':9, 'Ten':10, 'Jack':10,
         'Queen':10, 'King':10, 'Ace':11}

playing = True

class Card:
    
    def __init__(self,rank,suit):
        self.rank = rank
        self.suit = suit
    
    def __str__(self):
        return self.rank + ' of ' + self.suit

class Deck:
    
    def __init__(self):
        self.deck = []  # start with an empty list
        for suit in suits:
            for rank in ranks:
                self.deck.append(Card(rank,suit))
    
    def __str__(self):
        deck_comp = ''
        for card in self.deck:
            deck_comp += '\n' + card.__str__()
        return 'The deck has:' + deck_comp

    def shuffle(self):
        random.shuffle(self.deck)
        
    def deal(self):
        single_card = self.deck.pop()
        return single_card

class Hand:
    
    def __init__(self):
        self.cards = []  # start with an empty list as we did in the Deck class
        self.value = 0   # start with zero value
        self.aces = 0    # add an attribute to keep track of aces
    
    def add_card(self,card):
        self.cards.append(card)
        self.value += values[card.rank]
        if card.rank == 'Ace':
            self.aces += 1
    
    def adjust_for_ace(self):
        while self.value > 21 and self.aces:
            self.value -= 10
            self.aces -= 1

class Chips:
    
    def __init__(self):
        self.total = 100  # This can be set to a default value or supplied by a user input
        self.bet = 0
        
    def win_bet(self):
        self.total += self.bet
    
    def lose_bet(self):
        self.total -= self.bet

def take_bet(chips):
    
    while True:
        try:
            chips.bet = int(input('Please place your bet: '))
        except:
            print('Please enter an integer')
        else:
            if chips.bet > chips.total:
                print('Your bet is more than you have. Try again.')
            else:
                break

def hit(deck,hand):
    
    new_card = deck.deal()
    hand.add_card(new_card)
    hand.adjust_for_ace()

def hit_or_stand(deck,hand):
    global playing  # to control an upcoming while loop
    
    while True:
        player_hits = input('Do you want to Hit or Stand? (H/S): ')
        
        if player_hits.upper() == 'H':
            playing = True
            hit(deck,hand)
        
        elif player_hits.upper() == 'S':
            print('Player stands. Dealer is playing.')
            playing = False
        
        else:
            print('Please try again.')
            continue
        break

def show_some(player,dealer):
    print("\nDealer's Hand:")
    print(" <card hidden>")
    print('',dealer.cards[1])  
    print("\nPlayer's Hand:", *player.cards, sep='\n ')
    
def show_all(player,dealer):
    print("\nDealer's Hand:", *dealer.cards, sep='\n ')
    print("Dealer's Hand =",dealer.value)
    print("\nPlayer's Hand:", *player.cards, sep='\n ')
    print("Player's Hand =",player.value)

def player_busts(player,dealer,chips):
    print("Player busts!")
    chips.lose_bet()

def player_wins(player,dealer,chips):
    print("Player wins!")
    chips.win_bet()

def dealer_busts(player,dealer,chips):
    print("Dealer busts!")
    chips.win_bet()
    
def dealer_wins(player,dealer,chips):
    print("Dealer wins!")
    chips.lose_bet()
    
def push(player,dealer):
    print("Dealer and Player tie! It's a push.")

while True:
    # Print an opening statement
    print('Welcome to Blackjack\n')
    
    # Create & shuffle the deck, deal two cards to each player
    deck = Deck()
    deck.shuffle()
    player = Hand()
    dealer = Hand()
    
    print('Let us begin.')
    print('Dealing first two cards.')
    player.add_card(deck.deal())
    dealer.add_card(deck.deal())
    player.add_card(deck.deal())
    dealer.add_card(deck.deal())
        
    # Set up the Player's chips
    chips = Chips()
    print('You have 100 chips.\n')
    
    # Prompt the Player for their bet
    take_bet(chips)
    
    # Show cards (but keep one dealer card hidden)
    show_some(player,dealer)

    
    while playing:  # recall this variable from our hit_or_stand function
        
        # Prompt for Player to Hit or Stand
        hit_or_stand(deck,player)
        
        # Show cards (but keep one dealer card hidden)
        show_some(player,dealer) 
        
        # If player's hand exceeds 21, run player_busts() and break out of loop
        if player.value>21:
            player_busts(player,dealer,chips)
            break

    # If Player hasn't busted, play Dealer's hand until Dealer reaches 17
    if player.value<=21:
        while True:
            hit(deck,dealer)
            if dealer.value <=17:
                continue
            else:
                break
    
        # Show all cards
        show_all(player,dealer)
        # Run different winning scenarios
        if 21 >= dealer.value > player.value:
            dealer_wins(player,dealer,chips)
        elif dealer.value > 21:
            dealer_busts(player,dealer,chips)
        elif dealer.value < player.value:
            player_wins(player,dealer,chips)
        elif dealer.value == player.value:
            push(player,dealer)
    
    # Inform Player of their chips total 
    print('You chips now total ' + str(chips.total))
    # Ask to play again
    play_again = input('Would you like to play again (Y/N)?')
    if play_again.upper() == 'Y':
        playing = True
        continue
    else:
        print('Thank you for playing.')
        break
